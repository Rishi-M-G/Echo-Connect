// --------------------------------------------------------
// Code generated by Papyrus Java

// --------------------------------------------------------

package EchoConnect;

public class Ticket {
	public int TicketID;
	public String TicketStatus;
	public String TicketPriority;
	public String TicketAssignee;
	public String TicketAssignedTo;
	public String TicketDescription;
	
	public Ticket(int ticketID, String ticketStatus, String ticketPriority,
            String ticketAssignee, String ticketAssignedTo, String ticketDescription) {
		this.TicketID = ticketID;
		this.TicketStatus = ticketStatus;
		this.TicketPriority = ticketPriority;
		this.TicketAssignee = ticketAssignee;
		this.TicketAssignedTo = ticketAssignedTo;
		this.TicketDescription = ticketDescription;
}
	/**
	 * Getters and Setters
	 */
	// Getters and Setters
    public int getTicketID() {
        return ticketID;
    }

    public void setTicketID(int ticketID) {
        this.ticketID = ticketID;
    }

    public String getTicketStatus() {
        return ticketStatus;
    }

    public void setTicketStatus(String ticketStatus) {
        this.ticketStatus = ticketStatus;
    }

    public String getTicketPriority() {
        return ticketPriority;
    }

    public void setTicketPriority(String ticketPriority) {
        this.ticketPriority = ticketPriority;
    }

    public String getTicketAssignee() {
        return ticketAssignee;
    }

    public void setTicketAssignee(String ticketAssignee) {
        this.ticketAssignee = ticketAssignee;
    }

    public String getTicketAssignedTo() {
        return ticketAssignedTo;
    }

    public void setTicketAssignedTo(String ticketAssignedTo) {
        this.ticketAssignedTo = ticketAssignedTo;
    }

    public String getTicketDescription() {
        return ticketDescription;
    }

    public void setTicketDescription(String ticketDescription) {
        this.ticketDescription = ticketDescription;
    }

	/**
	 * Functionalities for Ticket State Diagram
	 */
    public void raiseTicket(int ticketID, String ticketPriority, String ticketDescription) {
        this.ticketID = ticketID;
        this.ticketPriority = ticketPriority;
        this.ticketDescription = ticketDescription;
        this.ticketStatus = "New";
        System.out.println("New support ticket raised!");
    }

    public void assignTicket(String assignee) {
        this.ticketAssignee = assignee;
        this.ticketStatus = "Assigned";
        System.out.println("Ticket assigned to: " + assignee);
    }

    public void changeTicketStatus(String newStatus) {
        this.ticketStatus = newStatus;
        System.out.println("Ticket status changed to: " + newStatus);
    }

    public static void viewAllTickets(List<Ticket> tickets) {
        for (Ticket ticket : tickets) {
            System.out.println("Ticket ID: " + ticket.getTicketID());
            System.out.println("Status: " + ticket.getTicketStatus());
            System.out.println("Priority: " + ticket.getTicketPriority());
            System.out.println("Assignee: " + ticket.getTicketAssignee());
            System.out.println("Assigned To: " + ticket.getTicketAssignedTo());
            System.out.println("Description: " + ticket.getTicketDescription());
            System.out.println("-----------------------------------------");
        }
    }

    public void setPriority(String priority) {
        this.ticketPriority = priority;
        System.out.println("Priority set to: " + priority);
    }
    
    public void startProgress() {
        if (ticketStatus.equals("Assigned")) {
            ticketStatus = "InProgress";
            System.out.println("Ticket " + ticketID + " is now in progress.");
        } else {
            System.out.println("Ticket must be assigned before starting progress.");
        }
    }

    public void markPending() {
        if (ticketStatus.equals("InProgress")) {
            ticketStatus = "Pending";
            System.out.println("Ticket " + ticketID + " marked as pending.");
        } else {
            System.out.println("Ticket must be in progress before marking as pending.");
        }
    }

    public void resolveTicket() {
        if (ticketStatus.equals("InProgress") || ticketStatus.equals("Pending")) {
            ticketStatus = "Resolved";
            System.out.println("Ticket " + ticketID + " resolved.");
        } else {
            System.out.println("Ticket must be in progress or pending to be resolved.");
        }
    }

    public void cancelTicket() {
        if (!ticketStatus.equals("Resolved") && !ticketStatus.equals("Cancelled")) {
            ticketStatus = "Cancelled";
            System.out.println("Ticket " + ticketID + " cancelled.");
        } else {
            System.out.println("Ticket is already resolved or cancelled.");
        }
    }
    
    
	public void RaiseTicket() {
		System.out.println("New support ticket raised!");
	}

	/**
	 * 
	 */
	public void AssignTicket() {
		System.out.println("Ticket assigned to: " + TicketAssignedTo);
	}

	/**
	 * 
	 */
	public void SetPriority() {
		System.out.println("Priority set to: " + TicketPriority);
	}

	/**
	 * 
	 */
	public void ReassignTicket() {
		System.out.println("Ticket reassigned to: " + TicketAssignee);
	}

	/**
	 * 
	 */
	public void ChangeTicketStatus() {
        System.out.println("Ticket status changed to: " + TicketStatus);

	}

}
